import telebot
import random
from telebot import types
from ExchangeRateApi import *
import requests
from bs4 import BeautifulSoup
import time

bot = telebot.TeleBot('7459337661:AAGB37AI_7e4pYz943iJKC63699MBYhtGuQ')
api  = ExchangeRateApi("d10bb83f31daf59c5678869e")
global _help
global amount
new_post_url = None
_help = True

@bot.message_handler(commands=['start'])
def main(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µüöÄ', callback_data='start_learning')
    btn2 = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ‚è≥', callback_data='continue_learning')
    btn3 = types.InlineKeyboardButton('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ãüõ†', callback_data='tools_fenance')
    btn4 = types.InlineKeyboardButton('–ù–æ–≤–æ—Å—Ç–∏ –æ —Ä—ã–Ω–∫–µ‚ö°Ô∏è',callback_data='news')
    markup.add(btn1)
    markup.add(btn2)
    markup.add(btn3)
    markup.add(btn4)
    hello_message =  random.choice(['–ü—Ä–∏–≤–µ—Ç!\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
                                    "–õ–∏–∫—É—é—Ç –∞–∫—Ü–∏–∏!\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
                                    "–ê–∫—Ü–∏–∏ –µ—Å—Ç—å? –ê –µ—Å–ª–∏ –Ω–∞–π–¥—É?\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
                                    "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π!\n–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                                    f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                                    "Oh.. Here we go again.. \n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
                                    f"–≠—Ç–æ –≤–µ–¥—å —Ç—ã, {message.from_user.first_name}? –ù—É –ø—Ä–∏–≤–µ—Ç!\n–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}.\n–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                                    f"–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–π –ø—Ä–∏–±—ã–ª—å, –≥—Ä—É—Å—Ç–∏ –ø–æ —É–±—ã—Ç–∫–∞–º.\n–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, {message.from_user.first_name}? "])
    bot.send_message(message.chat.id, hello_message, reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    global amount
    global _help
    if callback.data == 'start_learning':
        bot.send_message(callback.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–Ω–µ–º –Ω–∞—à–µ –æ–±—É—á–µ–Ω–∏–µ! –ü–ª–∞–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 7 –º–æ–¥—É–ª–µ–π:"
                        "\n<b>1. –û—Å–Ω–æ–≤—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤</b>"
                         "\n<b>2. –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ä—ã–Ω–∫–∏</b>"
                         "\n<b>3. –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</b>"
                         "\n<b>4. –û—Å–Ω–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>"
                         "\n<b>5. –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>"
                         "\n<b>6. –õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã</b>"
                         "\n<b>7. –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–æ–Ω—è—Ç–∏—è</b>"
                        '\n\n –ù–∞—á–Ω–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –º–æ–¥—É–ª—è "–û—Å–Ω–æ–≤—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤"', parse_mode= "HTML")
        bot.send_message(callback.message.chat.id, "–û–±—É—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ —á–∞—Å—Ç—è–º:"
                                                   "\n<b>1 —á–∞—Å—Ç—å</b> - —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª"
                                                   "\n<b>2 —á–∞—Å—Ç—å</b> - —Ç–µ—Å—Ç, –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å–≤–æ–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (—Ç–µ—Å—Ç –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)"
                                                   "\n\n–ù—É —á—Ç–æ–∂, –Ω–∞—á–Ω–µ–º!", parse_mode= "HTML")

    if callback.data == "tools_fenance":
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç", callback_data= "converter")
        btn2 = types.InlineKeyboardButton("–ê–∫—Ü–∏–∏", callback_data= "stock")
        markup.add(btn1)
        markup.add(btn2)
        bot.send_message(callback.message.chat.id, "–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?", reply_markup= markup)

    if callback.data == "converter":
        if  _help:
            bot.send_message(callback.message.chat.id, '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç"?'
                                                   '\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤ –ø–æ—Å–ª–µ–¥—É—é—â–µ–º –±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä "100".\n'
                                                   '\n–ü–æ—Å–ª–µ, —á–µ—Ä–µ–∑ —Å–ª—ç—à (—ç—Ç–æ –≤–æ—Ç —Ç–∞–∫–æ–π –∑–Ω–∞–∫ "/") –≤–≤–µ–¥–∏—Ç–µ –±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –Ω—É–∂–Ω–æ–π –≤–∞–ª—é—Ç—ã (RUB/EUR, RUB/USD).'
                                                    '\n\n–¢–∞–∫–∂–µ –µ—Å—Ç—å –±—ã—Å—Ç—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç: USD/RUB –∏ EUR/RUB.')
            _help = False
        bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
        bot.register_next_step_handler(callback.message, summa)
    if callback.data == "another":
        markup_ant = types.InlineKeyboardMarkup()
        btn_view = types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–¥—ã –≤–∞–ª—é—Ç", url="https://www.exchangerate-api.com/docs/supported-currencies")
        markup_ant.add(btn_view)
        bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –∑–Ω–∞—á–µ–Ω–∏–π (–∫–æ–¥—ã –≤–∞–ª—é—Ç) —á–µ—Ä–µ–∑ —Å–ª—ç—à:",reply_markup=markup_ant)
        bot.register_next_step_handler(callback.message, owncurrency)

    if callback.data == 'usd/rub':
        text = api.get_pair_conversion("USD", "RUB", 1)
        values = callback.data.upper().split('/')
        num = 0
        for i in text:
            num += 1
            if i == "B":
                res = text[:num]
                break
        course = res.split("\n")
        res_text = res.split()
        revers_text = " ".join(res_text[::-1])
        num_probels = 0
        finaly_text = ""
        for i in revers_text:
            if i == " ":
                num_probels += 1
            if num_probels == 1:
                finaly_text = finaly_text + i
            if num_probels == 2:
                break
        finaly_text = finaly_text.strip()
        bot.send_message(callback.message.chat.id, f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å {values[0]} –∫ {values[1]}: {course[2]}"
                                                   f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É: {round(float(finaly_text), 2) * amount}")
    if callback.data == 'eur/rub':
        text = api.get_pair_conversion("EUR", "RUB", 1)
        values = callback.data.upper().split('/')
        num = 0
        for i in text:
            num += 1
            if i == "B":
                res = text[:num]
                break
        course = res.split("\n")
        res_text = res.split()
        revers_text = " ".join(res_text[::-1])
        num_probels = 0
        finaly_text = ""
        for i in revers_text:
            if i == " ":
                num_probels += 1
            if num_probels == 1:
                finaly_text = finaly_text + i
            if num_probels == 2:
                break
        finaly_text = finaly_text.strip()
        bot.send_message(callback.message.chat.id, f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å {values[0]} –∫ {values[1]}: {course[2]}"
                                                   f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É: {round(float(finaly_text),2)*amount}")

    if callback.data == "stock":
        bot.send_message(callback.message.chat.id, "–ê–∫—Ü–∏–∏")
    if callback.data == "news":
        News(callback.message)

def summa(message):
    global amount
    try:
        amount = int(message.text.strip())
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
        bot.register_next_step_handler(message, summa)
        return
    if amount > 0:
        markup_con = types.InlineKeyboardMarkup()
        btn_USD_RUB = types.InlineKeyboardButton("USD/RUB", callback_data='usd/rub')
        btn_EUR_RUB = types.InlineKeyboardButton("EUR/RUB", callback_data='eur/rub')
        btn_another = types.InlineKeyboardButton("–î—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", callback_data='another')
        markup_con.add(btn_USD_RUB, btn_EUR_RUB)
        markup_con.row(btn_another)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", reply_markup=markup_con)

    else:
        bot.send_message(message.chat.id,"–í—ã –≤–≤–µ–ª–∏ —Å—É–º–º—É –º–µ–Ω—å—à–µ –Ω—É–ª—è")
        bot.register_next_step_handler(message, summa)

def owncurrency(message):
    try:
        values = str(message.text).upper().split('/')
        text = api.get_pair_conversion(values[0], values[1], 1)
        num = 0
        for i in text:
            num += 1
            if i == values[1][0] and text[num] == values[1][1] and text[num+1] == values[1][-1]:
                res = text[:num]
                break
        course = text.split("\n")
        res_text = res.split()
        revers_text = " ".join(res_text[::-1])
        num_probels = 0
        finaly_text = ""
        for i in revers_text:
            if i == " ":
                num_probels += 1
            if num_probels == 1:
                finaly_text = finaly_text + i
            if num_probels == 2:
                break
        finaly_text = finaly_text.strip()
        bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å {values[0]} –∫ {values[1]}: {course[2]}"
                                                   f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É: {round(float(finaly_text), 2)*amount}")

    except Exception:
        bot.send_message(message.chat.id,"–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å–ª—ç—à:")
        bot.register_next_step_handler(message, owncurrency)

def News(message):
    global new_post_url
    URL = "https://bcs-express.ru/category"
    response = requests.get(URL)
    html = response.text

    soup = BeautifulSoup(html, 'html.parser')

    newest_post = soup.find('div', class_='TjB6 KSLV Ncpb E6j8')

    title = soup.find('a', class_='iKzE').text.strip()
    description = soup.find('p', class_="OIgY").text.strip()
    url = soup.find('a', class_='iKzE', href=True)['href'].strip()

    if url != new_post_url:
        new_post_url = url
        bot.send_message(message.chat.id, f"‚ùóÔ∏è<b>{str(title).upper()}</b>‚ùóÔ∏è\n\n<i>{description}</i>\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: {url}",parse_mode='HTML')
    time.sleep(60)
    News(message)

@bot.message_handler()
def info(message):
    bot.send_message(message.chat.id, random.choice(["–î–∞, —ç—Ç–æ –≤—Å—ë –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–æ–Ω–µ—á–Ω–æ.","–ü–æ–Ω—è–ª —Ç–µ–±—è.. —Ö–æ—Ç—è –º–æ–∂–µ—Ç –∏ –Ω–µ –ø–æ–Ω—è–ª... –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ...","–ò–∑–≤–æ–ª—å—Ç–µ.","–•–º, —Ö–æ—Ä–æ—à–æ."]))

bot.polling(non_stop=True)